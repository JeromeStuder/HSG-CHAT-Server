/*
 * This file is part of record-editor.
 * Copyright (C) 2018 CERN.
 *
 * record-editor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * record-editor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with record-editor; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 * In applying this license, CERN does not
 * waive the privileges and immunities granted to it by virtue of its status
 * as an Intergovernmental Organization or submit itself to any jurisdiction.
 */
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import * as socketIO from 'socket.io-client';
var RxSocket = /** @class */ (function () {
    function RxSocket(url, options) {
        this.socket = socketIO(url, options);
    }
    RxSocket.prototype.disconnect = function () {
        this.socket.disconnect();
    };
    RxSocket.prototype.connect = function () {
        this.socket.connect();
    };
    RxSocket.prototype.observable = function (event) {
        return this.createEventObservable(event);
    };
    RxSocket.prototype.subject = function (event) {
        return this.createEventSubject(event);
    };
    RxSocket.prototype.createEventSubject = function (event) {
        var _this = this;
        var incoming$ = this.createEventObservable(event);
        var outgoing = {
            next: function (data) {
                _this.socket.emit(event, data);
            },
        };
        return Subject.create(outgoing, incoming$);
    };
    RxSocket.prototype.createEventObservable = function (event) {
        var _this = this;
        return Observable.create(function (incoming) {
            _this.socket.on(event, function (data) {
                incoming.next(data);
            });
            return function () { _this.onEventSubjectUnsubscribe(event); };
        });
    };
    RxSocket.prototype.onEventSubjectUnsubscribe = function (event) {
        // FIXME: conditional socket.disconnect or socket.removeListener
    };
    return RxSocket;
}());
export { RxSocket };
//# sourceMappingURL=/Users/harunurhan/ts/rx-socket.io-client/src/index.js.map